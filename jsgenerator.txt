<script type="module">
        import { GoogleGenerativeAI } from "https://esm.run/@google/generative-ai";

        const apiKey = "AIzaSyC3t1Y2VLphaTVviDM82iEe5pMLzap8_xc";
        const genAI = new GoogleGenerativeAI(apiKey);

        document.getElementById('clear_prompt_btn').addEventListener('click', function() {
            document.getElementById('prompt').value = '';
        });

        document.getElementById('copy_prompt_btn').addEventListener('click', function() {
            const promptTextarea = document.getElementById('prompt');
            promptTextarea.select();
            document.execCommand('copy');
            promptTextarea.setSelectionRange(0, 0);
        });

        document.getElementById('generate_btn').addEventListener('click', async function() {
            const prompt = document.getElementById('prompt').value.trim();
            const targetLang = document.getElementById('target_lang').value;

            if (!prompt) {
                alert('Please fill in the Prompt field.');
                return;
            }

            try {
                const modifiedPrompt = prompt + " code in " + targetLang + " and print output in separate line";
                const model = genAI.getGenerativeModel({ model: "gemini-pro" });
                const result = await model.generateContent(modifiedPrompt);
                const response = await result.response;
                const text = await response.text();

                const outputIndex = text.indexOf('Output:');
                const codeContent = outputIndex !== -1 ? text.substring(0, outputIndex).trim() : text.trim();
                const codeLines = codeContent.split('\n');
                const filteredCodeLines = codeLines.filter(line => !line.includes('```'));
                const generatedCode = filteredCodeLines.join('\n').trim();

                document.getElementById('output').value = generatedCode;
            } catch (error) {
                console.error('Error:', error.message);
                alert('An error occurred. Please try again.');
            }
        });

        document.getElementById('clear_output_btn').addEventListener('click', function() {
            document.getElementById('output').value = '';
        });

        document.getElementById('copy_output_btn').addEventListener('click', function() {
            const outputTextarea = document.getElementById('output');
            outputTextarea.select();
            document.execCommand('copy');
            outputTextarea.setSelectionRange(0, 0);
        });
    </script>





    <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Code Generator</title>
  <link rel="stylesheet" href="checker.css">
  <link rel="stylesheet" data-name="vs/editor/editor.main" href="https://cdn.jsdelivr.net/npm/monaco-editor@0.34.1/min/vs/editor/editor.main.css">
  <style>
    /* Dropdown */
    .dropdown {
      position: relative;
      display: inline-block;
    }

    .dropdown-btn {
      background-color: var(--blue-color);
      color: white;
      padding: 8px 16px;
      font-size: 13px;
      border: none;
      cursor: pointer;
    }

    .dropdown-content {
      display: none;
      position: absolute;
      background-color: var(--blue-color);
      min-width: 140px;
      box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
      z-index: 1;
    }

    .dropdown-content a {
      color: white;
      padding: 8px 12px;
      text-decoration: none;
      display: block;
      font-size: 14px;
    }

    .dropdown-content a:hover {
      background-color: var(--purple-color);
    }

    .dropdown:hover .dropdown-content {
      display: block;
    }

    .dropdown:hover .dropdown-btn {
      background-color: var(--purple-color);
    }
  </style>
</head>
<body>
  <div class="video-container">
    <video autoplay muted loop id="myVideo">
      <source src="matrix.mp4" type="video/mp4">
    </video>
    <div class="video-overlay"></div>
  </div>

  <div class="content-conatiner">
    <h1 class="cyberpunk glitched"><strong>WRITIO CODE GENERATOR</strong></h1>
    <h3 class="cyberpunk glitched">Generate your code here:</h3>
    <div id="editor-container" style="height: 400px; width: 1300px; border: 1px solid #ccc;"></div>
    <button id="clear_input_btn" class="cyberpunk2077 green">Clear</button><br>
    <div class="dropdown">
      <button class="cyberpunk2077 dropdown-btn">Target Language</button>
      <div class="dropdown-content">
        <a href="#" class="cyberpunk2077" data-lang="python">Python</a>
        <a href="#" class="cyberpunk2077" data-lang="javascript">JavaScript</a>
        <a href="#" class="cyberpunk2077" data-lang="java">Java</a>
        <a href="#" class="cyberpunk2077" data-lang="csharp">C#</a>
        <a href="#" class="cyberpunk2077" data-lang="cpp">C++</a>
        <a href="#" class="cyberpunk2077" data-lang="php">PHP</a>
        <a href="#" class="cyberpunk2077" data-lang="ruby">Ruby</a>
        <a href="#" class="cyberpunk2077" data-lang="swift">Swift</a>
        <a href="#" class="cyberpunk2077" data-lang="go">Go</a>
        <a href="#" class="cyberpunk2077" data-lang="kotlin">Kotlin</a>
      </div>
    </div>
    <button id="generate_btn" class="cyberpunk2077 red">Generate Code</button>

    <br>
    <h3 class="cyberpunk glitched">Result:</h3>
    <div id="result-editor-container" style="height: 400px; width: 1300px; border: 1px solid #ccc;"></div>
    <button id="clear_output_btn" class="cyberpunk2077 green">Clear</button>
    <button id="copy_output_btn" class="cyberpunk2077 purple">Copy</button>
  </div>

  <footer>
    <h2 class="cyberpunk glitched">Made by AMIT.</h2>
  </footer>

  <script src="https://cdn.jsdelivr.net/npm/monaco-editor@0.34.1/min/vs/loader.min.js"></script>
  <script>
    require.config({ paths: { 'vs': 'https://cdn.jsdelivr.net/npm/monaco-editor@0.34.1/min/vs' }});
    require(['vs/editor/editor.main'], function() {
      // Create the input editor
      const inputEditor = monaco.editor.create(document.getElementById('editor-container'), {
        value: '', // Set the initial value here, if needed
        language: 'plaintext',
        theme: 'vs-dark',
        automaticLayout: true,
        readOnly: false
      });

      // Create the output editor
      const outputEditor = monaco.editor.create(document.getElementById('result-editor-container'), {
        value: '', // Set the initial value here, if needed
        language: 'plaintext',
        theme: 'vs-dark',
        automaticLayout: true,
        readOnly: true
      });
    });
  </script>
  <script>
    import { GoogleGenerativeAI } from "https://esm.run/@google/generative-ai";
    
    const apiKey = "AIzaSyC3t1Y2VLphaTVviDM82iEe5pMLzap8_xc";
    const genAI = new GoogleGenerativeAI(apiKey);

    let selectedLanguage = 'python'; // Default language

    // Event listener for dropdown menu
    document.querySelectorAll('.dropdown-content a').forEach(link => {
      link.addEventListener('click', (event) => {
        event.preventDefault();
        selectedLanguage = event.target.getAttribute('data-lang');
        document.querySelector('.dropdown-btn').textContent = `Target Language: ${selectedLanguage}`;
      });
    });

    document.getElementById('generate_btn').addEventListener('click', async function() {
        const prompt = inputEditor.getValue().trim();

        if (!prompt) {
            alert('Please fill in the Prompt field.');
            return;
        }

        try {
            const modifiedPrompt = prompt + " code in " + selectedLanguage + " and print output in separate line";
            const model = genAI.getGenerativeModel({ model: "gemini-pro" });
            const result = await model.generateContent(modifiedPrompt);
            const response = await result.response;
            const text = await response.text();

            const outputIndex = text.indexOf('Output:');
            const codeContent = outputIndex !== -1 ? text.substring(0, outputIndex).trim() : text.trim();
            const codeLines = codeContent.split('\n');
            const filteredCodeLines = codeLines.filter(line => !line.includes('```'));
            const generatedCode = filteredCodeLines.join('\n').trim();

            outputEditor.setValue(generatedCode);
        } catch (error) {
            console.error('Error:', error.message);
            alert('An error occurred. Please try again.');
        }
    });

    document.getElementById('clear_input_btn').addEventListener('click', function() {
        inputEditor.setValue('');
    });

    document.getElementById('clear_output_btn').addEventListener('click', function() {
        outputEditor.setValue('');
    });

    document.getElementById('copy_output_btn').addEventListener('click', function() {
        const outputContent = outputEditor.getValue();
        navigator.clipboard.writeText(outputContent)
          .then(() => {
            console.log('Output code copied to clipboard');
          })
          .catch((error) => {
            console.error('Failed to copy output code: ', error);
          });
    });
  </script>
</body>
</html>